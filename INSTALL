Zaurus Development Environment
------------------------------
To compile PortaBase (or do any other C++ development for the Zaurus), the
standard Qtopia development environment is used.  Details can be found at:

http://www.zaurususergroup.com/modules.php?op=modload&name=phpWiki&file=index&pagename=Compiler%20Setup

Windows Development Environment
-------------------------------
To compile PortaBase for use as a Windows desktop application, you will
need the following:
- Visual C++ 6.0 or .NET; Borland C++ almost works, but BeeCrypt needs some
  tweaking in order to work under that compiler (if you want to try to get
  that working, please contact me)
- The book "C++ GUI Programming With Qt 3" by Jasmin Blanchette and Mark
  Summerfield, which comes with a non-commercial version of Qt 3.2.1 for
  Windows.  Alternatively, you can purchase a commercial license for Qt.
- Inno Setup, if you wish to create the PortaBase installer; available from:
  http://www.jrsoftware.org/isinfo.php

Linux/UNIX Development Environment
----------------------------------
To compile PortaBase for use as a Linux or UNIX desktop application, you
will need the following:
- g++ (any relatively recent version should work)
- A recent version of Qt 3 (including qmake and development headers)
- Other packages as needed to satisfy the above requirements or create
  packages for your OS/distribution

Metakit Compilation
-------------------
To compile PortaBase, Metakit must be compiled first.  PortaBase uses a
version of 2.4.9.3 patched to allow case-sensitive searches, locale-sensitive
sorting, and unicode filename support where available.  Therefore, the patch
file metakit-2.4.9.3.patch must be applied to the Metakit 2.4.9.3 source tree
before building.

To build Metakit for the desktop test environment, run dev-x86-qpe.sh and then
follow the Metakit installation instructions (in the Metakit README file).
Then copy the created libmk4.a (probably in /usr/local/lib unless you
specified somewhere else) to /opt/Qtopia/lib/ so it can be found when
compiling PortaBase.

To build Metakit for the Zaurus, use the instructions for the test environment
(after cleaning out the results of that build, or from a different copy of the
source directory) but with the following changes:

- Run dev-arm-qpe.sh instead of dev-x86-qpe.sh.
- Instead of running ../unix/configure, run:

NM=arm-linux-nm LD=arm-linux-ld CC=arm-linux-gcc CXX=arm-linux-g++ RANLIB=arm-linux-ranlib AR=arm-linux-ar ../unix/configure --prefix=/output/dir --host=arm-linux

Replace "/output/dir" with the directory you want the build results to be
placed in (probably not /usr/local this time).  Then copy libmk4.a to
/opt/Qtopia/sharp/lib instead of /opt/Qtopia/lib.

To compile Metakit for Windows, follow the instructions in Metakit's README
file; be sure to build the static library version (mklib).  To compile
Metakit for use in Linux desktop PortaBase, just follow the README directions.

BeeCrypt compilation
--------------------
Get BeeCrypt version 3.1.0.  For the desktop versions of PortaBase, just
follow the build instructions found in BeeCrypt's INSTALL file.  For the
Zaurus version, run the configure script as follows:

NM=arm-linux-nm LD=arm-linux-ld CC=arm-linux-gcc CXX=arm-linux-g++ RANLIB=arm-linux-ranlib AR=arm-linux-ar ./configure --prefix=/output/dir --host=arm-linux --enable-aio=no

As with Metakit, replace /output/dir with the directory in which to place
the results.  Copy libbeecrypt.a to the same place the Metakit library went.

libjpeg compilation
-------------------
For desktop Linux, this is probably already on your system; just make sure to
install the appropriate dev package if it hasn't already been installed (for
Debian this is libjpeg62-dev).  For Windows, get version 6b from
http://www.ijg.org and follow the build instructions from the install.doc file
that comes with the source code. For the Zaurus version, it's easiest to just
use the Debian arm package for libjpeg62-dev; after downloading the .deb file,
you can extract the necessary files by running:

ar x libjpeg62-dev_6b-9_arm.deb
tar xzf data.tar.gz

Move libjpeg.a to /opt/Qtopia/sharp/lib and the include files to
/opt/Qtopia/sharp/include.

Note that if you're attempting to compile using Borland C++, you'll have to
make a few changes to the code: see http://www.bcbdev.com/articles/jpeg.htm
for details.

PortaBase for Zaurus Compilation
--------------------------------
After compiling Metakit, BeeCrypt, and libjpeg as described above, PortaBase
can be compiled in the usual manner for Qtopia applications.  Use tmake on
portabase.pro; tmake usage is described in the compiler setup HOWTO mentioned
above.  Use "qtopia" as one of the CONFIG parameters in the file.
"arm-linux-strip" should be run on the resulting "portabase" executable in
order to reduce its size by removing unneeded debugging information and such.

To compile a version with support for the file navigation widget on
newer Sharp ROMs, replace the "qtopia" CONFIG parameter with "sharp".  You
will also need the development files for Sharp's custom Zaurus libraries;
these are available from the following (Japanese) page:

http://developer.ezaurus.com/sl_j/doc/reference.htm

To compile for the desktop Qtopia test environment, add "test" to the list of
CONFIG parameters.

PortaBase for Windows Compilation, Packaging
--------------------------------------------
- Install Qt version 3.2 or newer and configure it (make sure the "bin"
  directory is in your path and that the QTDIR and QMAKESPEC environment
  variables are set correctly).
- Adjust the value of INCLUDEPATH in portabase.pro as needed to locate the
  library header files on your system.
- Make sure that "desktop" is among the CONFIG parameters in portabase.pro
  (and that "qtopia", "sharp", and "test" aren't).
- Run "qmake -t vcapp -o portabase.dsp portabase.pro"
- Copy beecrypt.dll, beecrypt.lib, libjpeg.lib, and mk4vc60s.lib to the
  PortaBase source directory.
- Open the generated portabase.dsp file in Visual C++, and from
  "Build->Set Active Configuration..." select "portabase - Win32 Release".
- Execute the build.
- Copy qt-mtnc321.dll from Qt's "lib" directory to the Release subdirectory
  created by Visual C++.
- Copy msvcrt.dll to the PortaBase source directory.
- Run "lrelease portabase.pro" to generate the UI translation files.
- Open portabase.iss with Inno Setup and choose "Compile"

Debian Package Building
-----------------------
To create a Debian package for the desktop version of PortaBase, follow
the normal process for building a Debian package:
- Unpack the source tarball
- Move the resulting "portabase" directory to "portabase-1.9" (or whatever
  the current version number is)
- From the root source directory, either run "dpkg-buildpackage" as root
  or run "dpkg-buildpackage -rfakeroot" (if you have fakeroot installed)

Linux/UNIX compilation
----------------------
- Set the QMAKESPEC and QTDIR environment variables as appropriate for your
  platform
- Make sure the Metakit and BeeCrypt static libraries (.a) are in your
  LD_LIBRARY_PATH, and that the other library files (.so, .la, etc.) aren't.
- Make sure that "desktop" is among the CONFIG parameters in portabase.pro
  (and that "qtopia", "sharp", and "test" aren't).
- Run qmake on portabase.pro
- Run make

Linux/UNIX installation
-----------------------
If you aren't building a Debian package, you'll need to manually copy some
files into the correct locations:

1- All the icons from the "desktop/icons" directory should go into
/usr/share/portabase/icons, e.g.:

/usr/share/portabase/icons/close.png
/usr/share/portabase/icons/portabase/save.png

...and so forth.

2- The help files and UI translation files go into /usr/share/portabase, e.g.:

/usr/share/portabase/help/en/portabase.html
/usr/share/portabase/help/ja/portabase.html
/usr/share/portabase/i18n/ja/portabase.qm

...and so on.  (The portabase.qm files are created by running lrelease on
portabase.pro.)

Package Building
----------------
To create ".ipk" files for installation on the Zaurus, create the following
directory hierarchy as root in a directory of your choice:

/portabase/CONTROL/control
/portabase/CONTROL/postinst
/portabase/opt/QtPalmtop/apps/Applications/portabase.desktop
/portabase/opt/QtPalmtop/bin/portabase
/portabase/opt/QtPalmtop/help/en/html/portabase.html
/portabase/opt/QtPalmtop/help/ja/html/portabase.html
/portabase/opt/QtPalmtop/help/zh_TW/html/portabase.html
/portabase/opt/QtPalmtop/i18n/cs/portabase.qm
/portabase/opt/QtPalmtop/i18n/fr/portabase.qm
/portabase/opt/QtPalmtop/i18n/ja/portabase.qm
/portabase/opt/QtPalmtop/i18n/zh_TW/portabase.qm
/portabase/opt/QtPalmtop/pics/PortaBase.png
/portabase/opt/QtPalmtop/pics/portabase/QtaDatePickerNext.xpm
/portabase/opt/QtPalmtop/pics/portabase/QtaDatePickerPrev.xpm
/portabase/opt/QtPalmtop/pics/portabase/calc.png
/portabase/opt/QtPalmtop/pics/portabase/calendar.xpm
/portabase/opt/QtPalmtop/pics/portabase/checked.png
/portabase/opt/QtPalmtop/pics/portabase/image.png
/portabase/opt/QtPalmtop/pics/portabase/note.png
/portabase/opt/QtPalmtop/pics/portabase/save.png
/portabase/opt/QtPalmtop/pics/portabase/save_disabled.png
/portabase/opt/QtPalmtop/pics/portabase/unchecked.png
/portabase/opt/QtPalmtop/pics144/portabase/save.png
/portabase/opt/QtPalmtop/pics144/portabase/save_disabled.png

(The portabase.qm files are created by running lrelease on the .pro file.)

Finally, run ipkg-build on the portabase directory; this will create the
.ipk file.
