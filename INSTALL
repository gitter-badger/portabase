Maemo Development Environment
-----------------------------
To compile PortaBase for Maemo portable devices (Nokia N810, N900, etc.), you
will need a suitable development environment.  I use ESbox
(http://esbox.garage.maemo.org/2nd_edition/), but you should also be able to
use the Maemo SDK directly (either on a Linux system or in a Linux virtual
machine via VMWare, VirtualBox, etc.)  For Maemo 5 development, MADDE
(https://wiki.maemo.org/MADDE) may work as well; at the time of this writing,
it doesn't yet seem to support compiling Qt applications for Maemo 4.

Windows Development Environment
-------------------------------
To compile PortaBase for use as a Windows desktop application, you will
need the following:
- Windows XP, Vista, or 7
- A recent version of Qt 4 (http://qt.nokia.com/downloads).  It's easiest to
  get started with a version that comes with the MinGW compiler, since I
  haven't tested the latest code with Visual Studio.
- Inno Setup, if you wish to create the PortaBase installer; available from:
  http://www.jrsoftware.org/isinfo.php

Linux/UNIX Development Environment
----------------------------------
To compile PortaBase for use as a Linux or UNIX desktop application, you
will need the following:
- g++ (any relatively recent version should work)
- A recent version of Qt 4 (including qmake and development headers)
- Other packages as needed to satisfy the above requirements or create
  packages for your OS/distribution
  
Mac OS X Development Environment
--------------------------------
To compile PortaBase for use as a Mac OS X desktop application, you will
need the following:
- Mac OS X Tiger (10.4) or higher
- The Apple developer tools (which are on one of the CDs that come with
  the operating system)
- A recent version of Qt 4 (http://qt.nokia.com/downloads)

Metakit Compilation
-------------------
To compile PortaBase, Metakit (http://www.equi4.com/metakit/) must be compiled
first.  PortaBase uses a version of 2.4.9.7 patched to allow case-sensitive
searches and locale-sensitive sorting.  Therefore, the patch file
metakit-2.4.9.7.patch must be applied to the Metakit 2.4.9.7 source tree before
building.

To build Metakit for Maemo, follow the Metakit installation instructions (in
the Metakit README file) inside the appropriate Scratchbox environment.  You'll
want to pass the "--enable-threads" and "--disable-shared" parameters to the
configure script.

To compile Metakit for Windows, follow the instructions in Metakit's README
file; be sure to build the static library version (mklib).  To compile
Metakit for use in Linux or Mac OS X desktop PortaBase, just follow the
README directions (the "UNIX" instructions in both cases); you'll want to use
the same configure script parameters mentioned above for Maemo development.

PortaBase for Maemo Compilation
--------------------------------
After compiling Metakit as described above, PortaBase can be compiled in the
usual manner for Maemo Qt applications.  See the ESbox (or Maemo SDK, or MADDE)
documentation for more information.

PortaBase for Windows Compilation, Packaging
--------------------------------------------
- Install a recent version of Qt 4 and configure it (make sure the "bin"
  directory is in your path and that the QTDIR and QMAKESPEC environment
  variables are set correctly).
- Adjust the value of INCLUDEPATH in portabase.pro as needed to locate the
  library header files on your system.
- Run "qmake -t vcapp -o portabase.dsp portabase.pro"
- Copy mk4vc60s.lib to the PortaBase source directory.
- Open the generated portabase.dsp file in Visual C++, and from
  "Build->Set Active Configuration..." select "portabase - Win32 Release".
- Execute the build.
- Copy qt-mtnc321.dll from Qt's "lib" directory to the Release subdirectory
  created by Visual C++.
- Copy msvcrt.dll to the PortaBase source directory.
- Run "lrelease portabase.pro" to generate the UI translation files.
- Open portabase.iss with Inno Setup and choose "Compile"

Debian Package Building
-----------------------
To create a Debian package for the desktop version of PortaBase, follow
the normal process for building a Debian package:
- Unpack the source tarball
- Move the resulting "portabase" directory to "portabase-1.9" (or whatever
  the current version number is)
- From the root source directory, either run "dpkg-buildpackage" as root
  or run "dpkg-buildpackage -rfakeroot" (if you have fakeroot installed)

Linux/UNIX compilation
----------------------
- Set the QMAKESPEC and QTDIR environment variables as appropriate for your
  platform
- Make sure the Metakit static library (libmk4.a) is in your LD_LIBRARY_PATH,
  and that the other library files (.so, .la, etc.) aren't.
- Run qmake on portabase.pro
- Run make

Linux/UNIX installation
-----------------------
If you aren't building a Debian package, you'll need to manually copy some
files into the correct locations:

1- All the icons from the "desktop/icons" directory should go into
/usr/share/portabase/icons, e.g.:

/usr/share/portabase/icons/close.png
/usr/share/portabase/icons/portabase/save.png

...and so forth.

2- The help files and UI translation files go into /usr/share/portabase, e.g.:

/usr/share/portabase/help/en/portabase.html
/usr/share/portabase/help/ja/portabase.html
/usr/share/portabase/i18n/ja/portabase.qm

...and so on.  (The portabase.qm files are created by running lrelease on
portabase.pro.)

Mac OS X compilation
--------------------
- Install a recent version of Qt 4 and configure it, as per the directions
  in its INSTALL file.
- Make sure the Metakit static library (libmk4.a) is in /usr/local/lib, and
  that the other library files (.dylib, .la, etc.) aren't.
- Run qmake on portabase.pro
- Run make
- Enter the "mac" subdirectory and run "./build_bundle.sh".  This will
  create the PortaBase application bundle in that directory (copying and
  appropriately linking the PortaBase executable and the Metakit shared
  library file in the process).  You can now run it and move it wherever
  you'd like.

Code Documentation Generation
-----------------------------
The PortaBase source code has been documented in a manner that allows
browsable documentation to be generated in HTML and other formats using
Doxygen (http://www.stack.nl/~dimitri/doxygen/index.html).  To do so:

- Install Doxygen on your system
- Download the version of Qt whose documentation you want to link to (optional)
- Run doxytag to generate the qt.tag file (on a UNIX system, this will look
  something like "doxytag -t qt.tag $QTDIR/doc/html) (optional)
- Make sure the TAGFILES line in PortaBase's "Doxyfile" file references the
  Qt documentation root you wish to link to; this can be either online or local
  (optional)
- Run "doxygen Doxyfile" in the Portabase source code main directory

Paths and environment variable formatting will vary across operating systems,
and the final step can optionally performed using the "doxywizard" GUI wizard.
I'll assume that people interested in understanding PortaBase's source code
can figure out these variations.

Maemo Package Building
----------------------
TODO
