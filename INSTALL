Zaurus Development Environment
------------------------------
To compile PortaBase (or do any other C++ development for the Zaurus), the
standard Qtopia development environment is used.  Details can be found at:

http://www.zauruszone.farplanet.net/howtos/linux_compiler_setup_howto.shtml

Windows Development Environment
-------------------------------
To compile PortaBase for use as a Windows desktop application, you will
need the following:
- Visual C++ 6.0 (not .NET; this is the only compiler supported by Qt-NC)
- Qt 2.3.0 Non-Commercial version for Windows; available from:
  http://www.trolltech.com/developer/download/qt-win-noncomm.html
- tmake, Trolltech's cross-platform Makefile builder; available from:
  http://www.trolltech.com/developer/download/tmake.html
- Inno Setup, if you wish to create the PortaBase installer; available from:
  http://www.jrsoftware.org/isinfo.php

Linux/UNIX Development Environment
----------------------------------
To compile PortaBase for use as a Linux or UNIX desktop application, you
will need the following:
- g++ (any relatively recent version should work)
- The latest version of Qt 3 (including qmake and development headers)
- Other packages as needed to satisfy the above requirements or create
  packages for your OS/distribution

Metakit Compilation
-------------------
To compile PortaBase, Metakit must be compiled first.  PortaBase uses a
version of 2.4.8 patched to perform case-sensitive searches.  Therefore,
the patch file metakit-2.4.8.patch must be applied to the Metakit 2.4.8
source tree before building.

To build Metakit for the desktop test environment, run dev-x86-qpe.sh and then
follow the Metakit installation instructions (in the Metakit README file).
Then copy the created libmk4.a (probably in /usr/local/lib unless you
specified somewhere else) to /opt/Qtopia/lib/ so it can be found when
compiling PortaBase.

To build Metakit for the Zaurus, use the instructions for the test environment
(after cleaning out the results of that build, or from a different copy of the
source directory) but with the following changes:

- Run dev-arm-qpe.sh instead of dev-x86-qpe.sh.
- Instead of running ../unix/configure, run:

NM=arm-linux-nm LD=arm-linux-ld CC=arm-linux-gcc CXX=arm-linux-g++ RANLIB=arm-linux-ranlib AR=arm-linux-ar ../unix/configure --prefix=/output/dir --host=arm-linux

Replace "/output/dir" with the directory you want the build results to be
placed in (probably not /usr/local this time).  Then copy libmk4.a to
/opt/Qtopia/sharp/lib instead of /opt/Qtopia/lib.

To compile Metakit for Windows, follow the instructions in Metakit's README
file; be sure to build the static library version (mklib).  To compile
Metakit for use in Linux desktop PortaBase, just follow the README directions.

Beecrypt compilation
--------------------
Get the latest version of Beecrypt from CVS (PortaBase is currently using
the code from March 1, 2003).  For the desktop versions of PortaBase, just
follow the build instructions found in Beecrypt's INSTALL file.  For the
Zaurus version, run the configure script as follows:

NM=arm-linux-nm LD=arm-linux-ld CC=arm-linux-gcc CXX=arm-linux-g++ RANLIB=arm-linux-ranlib AR=arm-linux-ar ./configure --prefix=/output/dir --host=arm-linux --enable-aio=no

As with Metakit, replace /output/dir with the directory in which to place
the results.  Copy libbeecrypt.a to the same place the Metakit library went.

For Debian unstable, just install the latest versions of the beecrypt2 and
beecrypt2-dev packages; you don't need to compile it yourself to compile
the desktop version of PortaBase.

PortaBase for Zaurus Compilation
--------------------------------
After compiling Metakit and Beecrypt as described above, PortaBase can be
compiled in the usual manner for Qtopia applications.  Use tmake on
portabase_test.pro for desktop testing and portabase.pro when building for
the Zaurus; tmake usage is described in the compiler setup HOWTO mentioned
above.  "arm-linux-strip" should be run on the Arm version of the "portabase"
executable in order to reduce its size by removing unneeded debugging
information and such.

PortaBase for Windows Compilation, Packaging
--------------------------------------------
- Set up environment variables so that the headers and libraries for Qt,
  Metakit, and Beecrypt are available.  VC++ binaries must also be in the
  PATH, etc.
- Run "tmake -o Makefile portabase_win.pro"
- Run "nmake"
- Fix any environment variables that prevent nmake from finishing, retry...
- Copy qt-mt230nc.dll, msvcrt.dll, and beecrypt.dll to the PortaBase source
  directory
- Open portabase.iss with Inno Setup and choose "Compile"

Debian Package Building
-----------------------
To create a Debian package for the desktop version of PortaBase, follow
the normal process for building a Debian package:
- Unpack the source tarball
- Move the resulting "portabase" directory to "portabase-1.5" (or whatever
  the current version number is)
- From the root source directory, either run "dpkg-buildpackage" as root
  or run "dpkg-buildpackage -rfakeroot" (if you have fakeroot installed)

Linux/UNIX compilation
----------------------
- Set the QMAKESPEC and QTDIR environment variables as appropriate for your
  platform
- Make sure the Metakit and Beecrypt static libraries (.a) are in your
  LD_LIBRARY_PATH, and that the dynamic libraries (.so) aren't.  (For
  Debian unstable, the beecrypt2 and beecrypt2-dev packages will set up
  that library for you.)
- Run qmake on portabase_desktop.pro
- Run make

Package Building
----------------
To create ".ipk" files for installation on the Zaurus, create the following
directory hierarchy as root in a directory of your choice:

/portabase/CONTROL/control
/portabase/CONTROL/postinst
/portabase/opt/QtPalmtop/apps/Applications/portabase.desktop
/portabase/opt/QtPalmtop/bin/portabase
/portabase/opt/QtPalmtop/help/html/portabase.html
/portabase/opt/QtPalmtop/pics/PortaBase.png
/portabase/opt/QtPalmtop/pics/portabase/QtaDatePickerNext.xpm
/portabase/opt/QtPalmtop/pics/portabase/QtaDatePickerPrev.xpm
/portabase/opt/QtPalmtop/pics/portabase/calendar.xpm
/portabase/opt/QtPalmtop/pics/portabase/checked.png
/portabase/opt/QtPalmtop/pics/portabase/save.png
/portabase/opt/QtPalmtop/pics/portabase/save_disabled.png
/portabase/opt/QtPalmtop/pics/portabase/unchecked.png

Finally, run ipkg-build on the portabase directory; this will create the
.ipk file.
